# .bashrc

# get standard system stuff
[ -f /etc/bashrc ] && . /etc/bashrc

# Path manipulation

# test if in path
function _inpath {
   echo ${PATH} | egrep -q "(^|:)${1}($|:)"
}
# add to end of path unless already there or not exist
function _pathadd {
  if [ -n "${1}" ]; then
    _inpath ${1} || [ ! -d ${1} ] || PATH=${PATH}:${1}
    shift
    _pathadd ${*}
  fi
}
# add to head of path unless already there or not exist
function _pathhead {
  if [ -n "${1}" ]; then
    _inpath ${1} || [ ! -d ${1} ] || PATH=${1}:${PATH}
    shift
    _pathhead ${*}
  fi
}

# homebrew (/usr/local on intel, /opt/homebrew on apple silicon)
[[ -r /usr/local/bin/brew ]] && eval $(/usr/local/bin/brew shellenv)
[[ -r /opt/homebrew/bin/brew ]] && eval $(/opt/homebrew/bin/brew shellenv)

# brew installed ruby
_pathhead ${HOMEBREW_PREFIX}/opt/ruby/bin/ ${HOMEBREW_PREFIX}/lib/ruby/gems/3.0.0/bin/ ${HOMEBREW_PREFIX}/lib/ruby/gems/2.7.0/bin/

_pathadd /usr/bin /bin /usr/sbin /sbin /usr/local/bin /opt/X11/bin

# these always go at the head (before installed stuff)
_pathhead ${HOME}/bin ${HOME}/dev/srednal/bin

export PATH

MANPATH=${MANPATH}:/usr/share/man:/usr/X11/man:/usr/X11R6/share/man
MANPATH=${MANPATH}:/usr/local/git/share/man
export MANPATH

export CLASSPATH=.


#####################

# interactive shell
if [ -n "$PS1" ]; then

    # Set up bash completion
    if type -t brew >/dev/null ; then
      if [ -f $(brew --prefix)/etc/bash_completion ]; then
          . $(brew --prefix)/etc/bash_completion
      else
          . ${HOME}/.bash_completion
      fi
    else
      . ${HOME}/.bash_completion
    fi

    # Prompt string: last part of directory, with red exit status if non-zero
    mk_prompt() {
        if [ $? == 0 ]; then
            PS1='...\W \$ '
        else
            PS1='...\W \[\033[1;31m\][$?]\[\033[m\] \$ '
        fi
    }
    PROMPT_COMMAND=mk_prompt

fi

# Ignore emacs backup files for file completes
export FIGNORE='~'

# Takes more than one ^D to exit the shell
export IGNOREEOF=2

# Repeated commands only go in history once
export HISTCONTROL=ignoredups

# Don't want ~/.bash_history
unset HISTFILE

# Colorized ls - BSD (Mac OS X)
export CLICOLOR=
# set colors to work with my term colors, etc
export LSCOLORS=dxcxbxbxgxbxbxBxBxDxDx

# Show file type when listing completions
bind 'set visible-stats on'


##################################################################
# Aliases and Functions

# Remove unwanted files
alias purge='rm -f *~ .??*~ \#*\#'
alias rpurge='find . \( -name  "*~" -o -name ".??*~" -o -name "\#*\#" \) -print | xargs rm -f'

# Command aliases

export LESS='-eRX'
alias more='less'
alias readme='less *[Rr][Ee][Aa][Dd]*[Mm][Ee]*'
alias h=history

function dash { open dash://man:"$*" ; }
function xman { open -a terminal x-man-page://$@ ; }

# directory listings
if [ `uname -s` = "Darwin" ]; then
    # include file locks in long ls
    alias ll='ls -lho'
    alias lla='ls -lhao'
    function lld { ls -lao $* | grep "^d" ; }
    function llf { ls -lao $* | grep "^-" ; }
else
    alias ll='ls -l'
    alias lla='ls -la'
    function lld { ls -la $* | grep "^d" ; }
    function llf { ls -la $* | grep "^-" ; }
fi

# Crutches for cd operations

# expand sym links
set -P

alias cd..='cd ..'
alias back='cd -'

# dump jar manifest
function mf { unzip -p $1 META-INF/MANIFEST.MF ; }
# unzip to new dir
function uzdir { n=`basename ${1}.dir` ; mkdir $n ; unzip -d $n $1 ; }

################################################################
# Build / SCM settings

# java, as in
# brew tap adoptopenjdk/openjdk
# brew cask install adoptopenjdk8
# will install into /Library/Java/JavaVirtualMachines/adoptopenjdk-*
function jdk() {
    # -q means quiet, else runs java -version after setting
    # -l means list
    local _q=0
    local _v=""
    while [ $# -ne 0 ]; do
      case $1 in
        -q) # quietly
          _q=1
          shift
          ;;
        -l) # list em
          /usr/libexec/java_home -V
          shift
          ;;
        *)
          _v="$1"
          shift
          ;;
       esac
    done
    if [ -n "$_v" ]; then # if no version given, don't set anything (just do java -version)
      if [ "$_v" = 6 -o "$_v" = 7 -o "$_v" = 8 ]; then # allow shortcut jdk 8 meaning jdk 1.8.  versioning omits the 1.x starting w/9
        _v="1.$_v"
      fi
      # MacOS Big Sur java_home is broken - must unset JAVA_HOME
      unset JAVA_HOME
      export JAVA_HOME=$(/usr/libexec/java_home -v $_v)
    fi
    [ $_q = 1 ] || java -version
}
function jdks {
  jdk -l
}
jdk -q 11 2>/dev/null

function gradle {
  if [ -x './gradlew' ]; then
    ./gradlew "$@"
  else
    /usr/local/bin/gradle "$@"
  fi
}

#########################################################
# Local additions

if [ -f ${HOME}/.bashrc-local ]; then
  . ${HOME}/.bashrc-local
fi


# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
if [ -d "$HOME/.rvm/bin" ]; then
  export PATH="$PATH:$HOME/.rvm/bin"
fi
