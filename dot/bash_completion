# bash_completion

##############################################
# gradle completion
# adapted from https://gist.github.com/nolanlawson/8694399

_gradle()
{

    local cache_dir="$HOME/.gradle_completion"
    mkdir -p $cache_dir

    local gradle_file_checksum='NONE'
    [ -f build.gradle ] && gradle_file_checksum=$(md5 -q build.gradle)

    local commands=''
    if [ -f $cache_dir/$gradle_file_checksum ]; then
        commands=$(cat $cache_dir/$gradle_file_checksum)
    else
        # echo
        # echo "indexing..."
        local gradle_cmd='gradle'
        [ -f ./gradlew ] && gradle_cmd='./gradlew'
        commands=$($gradle_cmd --offline --no-color --quiet tasks --all | sed -n -e 's/^ *\([a-z][^ ]*\)\( .*\)\{0,1\}$/\1/p')
        [ -z "$commands" ] || echo $commands >> $cache_dir/$gradle_file_checksum
    fi

    # could grok this from gradle --help but this is trimmed to what I might want to use...
    local opts='--help --no-rebuild --build-file --cache --settings-file --continue -D --system-prop --debug --daemon --gradle-user-home --gui --init-script --info --dry-run --no-color --no-daemon --offline -P --project-prop --project-dir --profile --project-cache-dir --quiet --recompile-scripts --refresh-dependencies --rerun-tasks --full-stacktrace --stacktrace --stop --no-search-upward --version --exclude-task'

    local cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "$opts $commands" -- $cur) )
}
complete -F _gradle gradle gradlew

#################################################

complete -F _man dash
complete -F _man xman

_git_logg ()
{
	_git_log
}

_git_kill_branch ()
{
	_git_branch
}


######

# brew install shyaml
_i2cssh () {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    words="$(cat ${HOME}/.i2csshrc | shyaml keys clusters)"
    COMPREPLY=( $(compgen -W "${words}" -- ${cur}) )
    return 0
}
complete -F _i2cssh i2cssh

_csshX () {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    words="$(sed -En 's/^ *clusters *=*(.*)$/\1/p' ${HOME}/.csshrc)"
    COMPREPLY=( $(compgen -W "${words}" -- ${cur}) )
    return 0
}
complete -F _csshX csshX
