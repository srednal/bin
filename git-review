#!/bin/bash
# git-review: Review a remote branch (merge request / code review) to be merged into master
# Must be in a branch with a remote named origin (which contains the branch to review, as will be merged into master)
# Need to have difftool setup

# Usage: git-review [--nodiff | --diff] remote-branch-name [merge-to-branch]
#     --nodiff skips running difftool on all the changed files
#     --diff uses (console) diff rather than difftool
#     merge-to-branch defaults to master, which is usually what you want

diffcmd="difftool"
case "$1" in
  --nodiff) 
    unset diffcmd
    shift
    ;;
  --diff)
    diffcmd="diff"
    shift
    ;;
esac

if [ $# -eq 0 ]; then echo "Usage: git-review [--nodiff | --diff] remote-branch-name [merge-to-branch(master)]"; exit 1; fi

master=${2:-master}
master=origin/${master/#origin\//}
review=origin/${1/#origin\//}

git fetch  # update remote refs

base=$(git merge-base ${master} ${review})

range="${base}..${review}"

commit_count=$(git rev-list --count ${range})

if [ 0 == ${commit_count} ]; then echo "${range} appears to have been merged"; exit; fi

# show what changed (all the commits)
echo "============= Changes in ${range} ============="
git log --stat --pretty=format:'%C(yellow)%h -%Creset %s %Cgreen(%cr) %C(red)<%an>%Creset%+b' ${range}

# and the final set of diff'ed files
if [ 1 -ne ${commit_count} ]; then
  echo
  echo "============= Final Diffs in ${range} ============="
  git diff --name-status ${range}
fi

# fire diff
if [ -n "${diffcmd}" ]; then
  git ${diffcmd} ${range}
fi